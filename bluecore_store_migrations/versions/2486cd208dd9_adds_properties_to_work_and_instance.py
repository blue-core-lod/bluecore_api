"""Adds properties to Work and Instance

Revision ID: 2486cd208dd9
Revises: 7214f9780e1f
Create Date: 2025-01-28 15:51:47.650300

"""
import rdflib
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector


# revision identifiers, used by Alembic.
revision: str = '2486cd208dd9'
down_revision: Union[str, None] = '7214f9780e1f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('instances', sa.Column('generation', sa.String(), nullable=True))
    op.add_column('works', sa.Column('title', sa.String(), nullable=True))
    # ### end Alembic commands ###
    connection = op.get_bind()
    result = connection.execute(sa.text("SELECT id, data FROM resource_base WHERE type = 'works';"))
    for id, data in result:
        graph = rdflib.Graph()
        graph.parse(data=data, format="json-ld")
        title = next(graph.objects(predicate=rdflib.URIRef("http://id.loc.gov/ontologies/bibframe/mainTitle")))
        if title is None:
            title = "Title Not Found"
        print(f"Updating Work {id} with title {title}")
        connection.execute(
            sa.text("UPDATE works SET title = :title WHERE id = :id;"),
            { "title": title,
              "id": id }
        )
    # Restore nullable constraint in Work model
    op.alter_column('works', 'title', existing_type=sa.String(), nullable=False)

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('works', 'title')
    op.drop_column('instances', 'generation')
    # ### end Alembic commands ###
